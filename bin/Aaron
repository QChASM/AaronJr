#!/usr/bin/env python
"""
stores arguments from command line and initializes Aaron:
    input_file  str     fname.in
    --absthermo bool    use absolute thermo for Aaron output
    --sleep     int     sleep time between status checks (minutes)
    --record    bool    save failed log files
    --debug     bool    run all opts using low_method
    --nosub     bool    make job/input files but don't submit
    --short     bool    use short wall time for all computations
    --restart   bool    complete restart of workflow
reads settings from aaronrc files and input file
"""

import argparse

from Aaron.aaron_init import AaronInit

args = argparse.ArgumentParser(
    description="AARON: An Automated Reaction Optimizer for New catalysts")
args.add_argument('input_file', type=str,
                  help='The Aaron input file (file extension: .ini)')
args.add_argument('--record', '-r', action='store_true',
                  help='Save failed .log files for further examination')
args.add_argument('--sleep', '-s', type=int,
                  help='Sleep interval (minutes) between status checks.')
args.add_argument('--absthermo', '-a', action='store_true',
                  help='Use absolute themochemistry for Aaron output')
args.add_argument('--debug', '-d', action='store_true',
                  help='Runs all optimization using the low_method and'
                  + ' using the short wall time')
args.add_argument('--nosub', '-n', action='store_true',
                  help='Builds .com files for the current step without'
                  + ' submitting')
args.add_argument('--short', action='store_true',
                  help='Use short wall time for all computations')
args.add_argument('--restart', action='store_true',
                  help='Restart Aaron workflow. All failed and repeated'
                  + ' conformers will be recovered.')

args = args.parse_args()
init = AaronInit(args.input_file, args)
