#! /usr/bin/env python3
from pprint import pprint

from fireworks import LaunchPad

LAUNCHPAD = LaunchPad.auto_load()


def main(args):
    workflows = set()
    if args.fw_id is not None:
        workflows.add(LAUNCHPAD.get_wf_by_fw_id(args.fw_id))
    if args.name is not None:
        for wf_id in LAUNCHPAD.get_wf_ids(
            query={"name": {"$regex": ".*{}.*".format(args.name)}}
        ):
            workflows.add(LAUNCHPAD.get_wf_by_fw_id(wf_id))
    if args.project is not None:
        for wf_id in LAUNCHPAD.get_wf_ids(
            query={"metadata.project": args.project}
        ):
            workflows.add(LAUNCHPAD.get_wf_by_fw_id(wf_id))

    for i, wf in enumerate(workflows):
        if i != 0:
            print()
        print(list(wf.id_fw.keys())[0], wf.name)
        attrs = ["metadata", "created_on", "updated_on", "state"]
        if args.verbose > 0:
            attrs.append("fws")
        if args.verbose > 1:
            attrs.append("links")
        for attr in attrs:
            if attr == "fws":
                print("  {}:".format(attr))
                for fw in sorted(wf.fws, key=lambda x: x.fw_id):
                    print("    {} {:9}".format(fw.fw_id, fw.state), end="")
                    if args.verbose > 0:
                        print(" {}".format(fw.name), end="")
                    print()
            elif attr == "links":
                print("  {}:".format(attr))
                for i, ln in sorted(wf.links.items()):
                    print("    {}: {}".format(i, ln))
            else:
                print("  {}:".format(attr), getattr(wf, attr))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--fw_id", type=int)
    parser.add_argument(
        "--name", type=str, help="Find workflows with names containing NAME"
    )
    parser.add_argument(
        "--project", type=str, help="Find workflows belonging to PROJECT"
    )
    parser.add_argument("-v", "--verbose", action="count", default=0)
    args = parser.parse_args()
    main(args)
